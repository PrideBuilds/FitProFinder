---
import '../styles/global.css';
import MessageNotification from '../components/MessageNotification.astro';

export interface Props {
  title: string;
  description?: string;
  showHeader?: boolean;
  showFooter?: boolean;
  requireAuth?: boolean;
  requireRole?: string;
}

const { 
  title, 
  description = "Find and book verified fitness and wellness professionals in your area",
  showHeader = true,
  showFooter = true,
  requireAuth = false,
  requireRole
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title} | FitProFinder</title>
    
    <!-- SEO Meta Tags -->
    <meta property="og:title" content={`${title} | FitProFinder`} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={`${title} | FitProFinder`} />
    <meta name="twitter:description" content={description} />
    
    <!-- Stripe.js for payment processing -->
    <script src="https://js.stripe.com/v3/"></script>
    
    <!-- Auth and Role Protection Script -->
    {(requireAuth || requireRole) && (
      <script define:vars={{ requireAuth, requireRole }}>
        // Check authentication status on page load
        document.addEventListener('DOMContentLoaded', async () => {
          const token = localStorage.getItem('fitpro_access_token');
          
          if (requireAuth && !token) {
            window.location.href = '/auth/login?redirect=' + encodeURIComponent(window.location.pathname);
            return;
          }
          
          if (requireRole && token) {
            try {
              const response = await fetch('http://localhost:5000/api/auth/me', {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              
              if (!response.ok) {
                throw new Error('Authentication failed');
              }
              
              const data = await response.json();
              const userRole = data.data?.user?.role;
              const adminLevel = data.data?.user?.admin_level;
              
              // Check role access
              if (requireRole === 'admin' && userRole !== 'admin') {
                alert('Access denied. Admin privileges required.');
                window.location.href = '/';
                return;
              }
              
              // Additional admin level checking could be added here
              if (requireRole === 'super_admin' && adminLevel !== 'super_admin') {
                alert('Access denied. Super admin privileges required.');
                window.location.href = '/';
                return;
              }
              
            } catch (error) {
              console.error('Auth check failed:', error);
              if (requireAuth) {
                window.location.href = '/auth/login?redirect=' + encodeURIComponent(window.location.pathname);
              }
            }
          }
        });
      </script>
    )}
  </head>
  <body class="min-h-screen bg-gray-50 flex flex-col">
    {showHeader && (
      <header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex justify-between items-center h-16">
            <!-- Logo -->
            <div class="flex items-center">
              <a href="/" class="flex items-center space-x-2">
                <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span class="text-white font-bold text-sm">FP</span>
                </div>
                <span class="text-xl font-bold text-gray-900 hidden sm:block">FitProFinder</span>
                <span class="text-lg font-bold text-gray-900 sm:hidden">FPF</span>
              </a>
            </div>

            <!-- Desktop Navigation -->
            <nav class="hidden md:flex items-center space-x-8">
              <a href="/search" class="text-gray-700 hover:text-blue-600 font-medium">Find Trainers</a>
              <a href="/how-it-works" class="text-gray-700 hover:text-blue-600 font-medium">How it Works</a>
              <a href="/for-trainers" class="text-gray-700 hover:text-blue-600 font-medium">For Trainers</a>
            </nav>

            <!-- Desktop Auth Buttons -->
            <div class="hidden md:flex items-center space-x-4">
              <div id="authNavigation">
                <!-- Default (not logged in) state -->
                <div id="notLoggedIn" class="flex items-center space-x-4">
                  <a href="/auth/login" class="text-gray-700 hover:text-blue-600 font-medium">Log in</a>
                  <a href="/auth/signup" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 font-medium">Sign up</a>
                </div>
                
                <!-- Logged in state -->
                <div id="loggedIn" class="hidden flex items-center space-x-4">
                  <div class="flex items-center space-x-3">
                    <img id="navUserAvatar" src="" alt="Profile" class="w-8 h-8 rounded-full">
                    <span id="navUserName" class="text-sm font-medium text-gray-700 hidden lg:block"></span>
                  </div>
                  <MessageNotification />
                  <a href="/bookings" class="text-gray-700 hover:text-blue-600 font-medium hidden lg:block">My Bookings</a>
                  <a id="dashboardLink" href="" class="text-gray-700 hover:text-blue-600 font-medium">Dashboard</a>
                  <button id="navLogoutBtn" class="text-gray-700 hover:text-red-600 font-medium hidden lg:block">Logout</button>
                </div>
              </div>
            </div>

            <!-- Mobile menu button -->
            <div class="md:hidden flex items-center">
              <button id="mobileMenuBtn" type="button" class="text-gray-500 hover:text-gray-600 focus:outline-none focus:text-gray-600 transition duration-150 ease-in-out" aria-label="Main menu" aria-expanded="false">
                <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                  <path id="hamburgerIcon" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                  <path id="closeIcon" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>
          </div>
        </div>

        <!-- Mobile menu -->
        <div id="mobileMenu" class="hidden md:hidden bg-white border-t border-gray-200 shadow-lg">
          <div class="px-4 pt-2 pb-3 space-y-1">
            <!-- Mobile Navigation Links -->
            <a href="/search" class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">Find Trainers</a>
            <a href="/how-it-works" class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">How it Works</a>
            <a href="/for-trainers" class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">For Trainers</a>
            
            <!-- Mobile Auth Section -->
            <div id="mobileAuthNavigation" class="pt-4 border-t border-gray-200">
              <!-- Default (not logged in) state -->
              <div id="mobileNotLoggedIn" class="space-y-2">
                <a href="/auth/login" class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">Log in</a>
                <a href="/auth/signup" class="block px-3 py-2 text-base font-medium bg-blue-600 text-white rounded-md hover:bg-blue-700">Sign up</a>
              </div>
              
              <!-- Logged in state -->
              <div id="mobileLoggedIn" class="hidden space-y-2">
                <!-- User info -->
                <div class="flex items-center px-3 py-2 space-x-3">
                  <img id="mobileNavUserAvatar" src="" alt="Profile" class="w-10 h-10 rounded-full">
                  <div>
                    <div id="mobileNavUserName" class="text-base font-medium text-gray-900"></div>
                    <div id="mobileNavUserRole" class="text-sm text-gray-500"></div>
                  </div>
                </div>
                
                <!-- Mobile navigation items -->
                <a href="/messages" class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">Messages</a>
                <a href="/bookings" class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">My Bookings</a>
                <a id="mobileDashboardLink" href="" class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">Dashboard</a>
                <button id="mobileNavLogoutBtn" class="block w-full text-left px-3 py-2 text-base font-medium text-red-600 hover:text-red-700 hover:bg-red-50 rounded-md">Logout</button>
              </div>
            </div>
          </div>
        </div>
      </header>
    )}

    <main class="flex-1">
      <slot />
    </main>

    {showFooter && (
      <footer class="bg-gray-900 text-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
            <!-- Company Info -->
            <div class="space-y-4">
              <div class="flex items-center space-x-2">
                <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span class="text-white font-bold text-sm">FP</span>
                </div>
                <span class="text-xl font-bold">FitProFinder</span>
              </div>
              <p class="text-gray-400">
                The trusted platform to find and book verified fitness and wellness professionals across the United States.
              </p>
            </div>

            <!-- For Clients -->
            <div>
              <h3 class="font-semibold mb-4">For Clients</h3>
              <ul class="space-y-2 text-gray-400">
                <li><a href="/search" class="hover:text-white">Find Trainers</a></li>
                <li><a href="/how-it-works" class="hover:text-white">How it Works</a></li>
                <li><a href="/reviews" class="hover:text-white">Reviews</a></li>
                <li><a href="/help" class="hover:text-white">Help Center</a></li>
              </ul>
            </div>

            <!-- For Trainers -->
            <div>
              <h3 class="font-semibold mb-4">For Trainers</h3>
              <ul class="space-y-2 text-gray-400">
                <li><a href="/for-trainers" class="hover:text-white">List Your Services</a></li>
                <li><a href="/trainer-signup" class="hover:text-white">Join as Trainer</a></li>
                <li><a href="/pricing" class="hover:text-white">Pricing</a></li>
                <li><a href="/trainer-resources" class="hover:text-white">Resources</a></li>
              </ul>
            </div>

            <!-- Company -->
            <div>
              <h3 class="font-semibold mb-4">Company</h3>
              <ul class="space-y-2 text-gray-400">
                <li><a href="/about" class="hover:text-white">About</a></li>
                <li><a href="/contact" class="hover:text-white">Contact</a></li>
                <li><a href="/privacy" class="hover:text-white">Privacy</a></li>
                <li><a href="/terms" class="hover:text-white">Terms</a></li>
              </ul>
            </div>
          </div>

          <div class="border-t border-gray-800 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center">
            <p class="text-gray-400">© 2024 FitProFinder. All rights reserved.</p>
            <div class="flex space-x-4 mt-4 md:mt-0">
              <a href="#" class="text-gray-400 hover:text-white">Privacy</a>
              <a href="#" class="text-gray-400 hover:text-white">Terms</a>
              <a href="#" class="text-gray-400 hover:text-white">Contact</a>
            </div>
          </div>
        </div>
      </footer>
    )}
  </body>
</html>

<script>
  // Mobile menu functionality
  function initializeMobileMenu() {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const mobileMenu = document.getElementById('mobileMenu');
    const hamburgerIcon = document.getElementById('hamburgerIcon');
    const closeIcon = document.getElementById('closeIcon');

    if (mobileMenuBtn && mobileMenu) {
      mobileMenuBtn.addEventListener('click', () => {
        const isMenuHidden = mobileMenu.classList.contains('hidden');
        
        if (!isMenuHidden) {
          // Close menu
          mobileMenu.classList.add('hidden');
          if (hamburgerIcon) hamburgerIcon.classList.remove('hidden');
          if (closeIcon) closeIcon.classList.add('hidden');
          mobileMenuBtn.setAttribute('aria-expanded', 'false');
        } else {
          // Open menu
          mobileMenu.classList.remove('hidden');
          if (hamburgerIcon) hamburgerIcon.classList.add('hidden');
          if (closeIcon) closeIcon.classList.remove('hidden');
          mobileMenuBtn.setAttribute('aria-expanded', 'true');
        }
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        const target = e.target as Node;
        if (!mobileMenuBtn.contains(target) && !mobileMenu.contains(target)) {
          mobileMenu.classList.add('hidden');
          if (hamburgerIcon) hamburgerIcon.classList.remove('hidden');
          if (closeIcon) closeIcon.classList.add('hidden');
          mobileMenuBtn.setAttribute('aria-expanded', 'false');
        }
      });

      // Close mobile menu with escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
          if (hamburgerIcon) hamburgerIcon.classList.remove('hidden');
          if (closeIcon) closeIcon.classList.add('hidden');
          mobileMenuBtn.setAttribute('aria-expanded', 'false');
        }
      });
    }
  }

  // Check authentication status and update navigation
  function updateNavigation() {
    const userData = localStorage.getItem('fitpro_user');
    
    // Desktop elements
    const notLoggedIn = document.getElementById('notLoggedIn');
    const loggedIn = document.getElementById('loggedIn');
    const navUserAvatar = document.getElementById('navUserAvatar');
    const navUserName = document.getElementById('navUserName');
    const dashboardLink = document.getElementById('dashboardLink');
    const navLogoutBtn = document.getElementById('navLogoutBtn');
    
    // Mobile elements
    const mobileNotLoggedIn = document.getElementById('mobileNotLoggedIn');
    const mobileLoggedIn = document.getElementById('mobileLoggedIn');
    const mobileNavUserAvatar = document.getElementById('mobileNavUserAvatar');
    const mobileNavUserName = document.getElementById('mobileNavUserName');
    const mobileNavUserRole = document.getElementById('mobileNavUserRole');
    const mobileDashboardLink = document.getElementById('mobileDashboardLink');
    const mobileNavLogoutBtn = document.getElementById('mobileNavLogoutBtn');

    if (userData) {
      try {
        const user = JSON.parse(userData);
        if (user.isAuthenticated) {
          // Show logged in state - Desktop
          if (notLoggedIn) notLoggedIn.classList.add('hidden');
          if (loggedIn) loggedIn.classList.remove('hidden');
          
          // Show logged in state - Mobile
          if (mobileNotLoggedIn) mobileNotLoggedIn.classList.add('hidden');
          if (mobileLoggedIn) mobileLoggedIn.classList.remove('hidden');
          
          // Update user info - Desktop
          if (navUserAvatar && navUserAvatar instanceof HTMLImageElement) {
            navUserAvatar.src = user.profileImageUrl || 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face';
          }
          if (navUserName) {
            navUserName.textContent = `${user.firstName} ${user.lastName}`;
          }
          if (dashboardLink && dashboardLink instanceof HTMLAnchorElement) {
            dashboardLink.href = user.role === 'trainer' ? '/dashboard/trainer' : '/dashboard/client';
          }
          
          // Update user info - Mobile
          if (mobileNavUserAvatar && mobileNavUserAvatar instanceof HTMLImageElement) {
            mobileNavUserAvatar.src = user.profileImageUrl || 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face';
          }
          if (mobileNavUserName) {
            mobileNavUserName.textContent = `${user.firstName} ${user.lastName}`;
          }
          if (mobileNavUserRole) {
            mobileNavUserRole.textContent = user.role === 'trainer' ? 'Trainer' : 'Client';
          }
          if (mobileDashboardLink && mobileDashboardLink instanceof HTMLAnchorElement) {
            mobileDashboardLink.href = user.role === 'trainer' ? '/dashboard/trainer' : '/dashboard/client';
          }
          
          // Add admin link if user is admin
          if (user.role === 'admin') {
            // Desktop admin link
            const adminLinkDesktop = document.createElement('a');
            adminLinkDesktop.href = '/admin';
            adminLinkDesktop.className = 'text-red-600 hover:text-red-700 font-medium';
            adminLinkDesktop.innerHTML = '🛡️ Admin';
            
            // Insert admin link before dashboard link in desktop nav
            if (dashboardLink && dashboardLink.parentNode) {
              dashboardLink.parentNode.insertBefore(adminLinkDesktop, dashboardLink);
            }
            
            // Mobile admin link
            const adminLinkMobile = document.createElement('a');
            adminLinkMobile.href = '/admin';
            adminLinkMobile.className = 'block px-3 py-2 text-base font-medium text-red-600 hover:text-red-700 hover:bg-red-50 rounded-md';
            adminLinkMobile.textContent = '🛡️ Admin Dashboard';
            
            // Insert admin link before dashboard link in mobile nav
            if (mobileDashboardLink && mobileDashboardLink.parentNode) {
              mobileDashboardLink.parentNode.insertBefore(adminLinkMobile, mobileDashboardLink);
            }
          }
          
          // Add logout handlers
          const logoutHandler = async () => {
            try {
              // Import auth API
              const { authApi } = await import('../utils/api.js');
              await authApi.logout();
            } catch (error) {
              console.error('Logout error:', error);
            } finally {
              localStorage.removeItem('fitpro_user');
              window.location.href = '/';
            }
          };

          if (navLogoutBtn) {
            navLogoutBtn.addEventListener('click', logoutHandler);
          }
          if (mobileNavLogoutBtn) {
            mobileNavLogoutBtn.addEventListener('click', logoutHandler);
          }
        }
      } catch (error) {
        console.error('Error parsing user data:', error);
        localStorage.removeItem('fitpro_user');
      }
    }
  }

  // Initialize everything on page load
  document.addEventListener('DOMContentLoaded', () => {
    initializeMobileMenu();
    updateNavigation();
  });

  // Handle window resize to close mobile menu on desktop
  window.addEventListener('resize', () => {
    const mobileMenu = document.getElementById('mobileMenu');
    const hamburgerIcon = document.getElementById('hamburgerIcon');
    const closeIcon = document.getElementById('closeIcon');
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');

    if (window.innerWidth >= 768 && mobileMenu && !mobileMenu.classList.contains('hidden')) {
      mobileMenu.classList.add('hidden');
      if (hamburgerIcon) hamburgerIcon.classList.remove('hidden');
      if (closeIcon) closeIcon.classList.add('hidden');
      if (mobileMenuBtn) mobileMenuBtn.setAttribute('aria-expanded', 'false');
    }
  });
</script> 