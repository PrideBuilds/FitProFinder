---
import BaseLayout from "../layouts/BaseLayout.astro";

const title = "My Bookings - FitProFinder";
const description = "Manage your fitness session bookings and schedule.";
---

<BaseLayout title={title} description={description}>
  <div class='min-h-screen bg-gray-50'>
    <!-- Loading State -->
    <div id='loadingState' class='max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-16'>
      <div class='text-center'>
        <div
          class='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4'
        >
        </div>
        <p class='text-gray-600'>Loading your bookings...</p>
      </div>
    </div>

    <!-- Auth Required -->
    <div
      id='authRequired'
      class='hidden max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-16'
    >
      <div class='bg-white rounded-lg shadow-sm p-8 text-center'>
        <div class='mb-6'>
          <div
            class='w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4'
          >
            <svg
              class='w-10 h-10 text-blue-600'
              fill='none'
              stroke='currentColor'
              viewBox='0 0 24 24'
            >
              <path
                stroke-linecap='round'
                stroke-linejoin='round'
                stroke-width='2'
                d='M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z'
              >
              </path>
            </svg>
          </div>
          <h1 class='text-3xl font-bold text-gray-900 mb-2'>Login Required</h1>
          <p class='text-gray-600'>
            Please log in to view your bookings and manage your sessions.
          </p>
        </div>

        <div class='flex flex-col sm:flex-row gap-4 justify-center'>
          <a
            href='/auth/login'
            class='px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium'
          >
            Log In
          </a>
          <a
            href='/auth/signup'
            class='px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium'
          >
            Sign Up
          </a>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div id='mainContent' class='hidden'>
      <!-- Header -->
      <div class='bg-white shadow-sm'>
        <div class='max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>
          <div class='flex justify-between items-center'>
            <div>
              <h1 class='text-3xl font-bold text-gray-900'>My Bookings</h1>
              <p class='text-gray-600 mt-1'>
                Manage your fitness sessions and schedule
              </p>
            </div>
            <a
              href='/search'
              class='bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium'
            >
              📅 Book New Session
            </a>
          </div>
        </div>
      </div>

      <!-- Content -->
      <div class='max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>
        <!-- Filters -->
        <div class='bg-white rounded-lg shadow-sm p-6 mb-8'>
          <div class='flex flex-wrap gap-4 items-center'>
            <div class='flex-1 min-w-[200px]'>
              <label class='block text-sm font-medium text-gray-700 mb-1'
                >Filter by Status</label
              >
              <select
                id='statusFilter'
                class='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500'
              >
                <option value=''>All Statuses</option>
                <option value='pending'>Pending</option>
                <option value='confirmed'>Confirmed</option>
                <option value='completed'>Completed</option>
                <option value='cancelled'>Cancelled</option>
              </select>
            </div>
            <div class='flex-1 min-w-[200px]'>
              <label class='block text-sm font-medium text-gray-700 mb-1'
                >Time Period</label
              >
              <select
                id='timeFilter'
                class='w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500'
              >
                <option value='upcoming'>Upcoming Sessions</option>
                <option value='past'>Past Sessions</option>
                <option value='all'>All Sessions</option>
              </select>
            </div>
            <div class='flex gap-2'>
              <button
                onclick='bookingsManager.applyFilters()'
                class='px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors'
              >
                Apply Filters
              </button>
              <button
                onclick='bookingsManager.clearFilters()'
                class='px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors'
              >
                Clear
              </button>
            </div>
          </div>
        </div>

        <!-- Bookings List -->
        <div id='bookingsList' class='space-y-4'>
          <!-- Bookings will be loaded here -->
        </div>

        <!-- Empty State -->
        <div id='emptyState' class='hidden text-center py-16'>
          <div
            class='w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4'
          >
            <svg
              class='w-10 h-10 text-gray-400'
              fill='none'
              stroke='currentColor'
              viewBox='0 0 24 24'
            >
              <path
                stroke-linecap='round'
                stroke-linejoin='round'
                stroke-width='2'
                d='M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z'
              >
              </path>
            </svg>
          </div>
          <h3 class='text-xl font-semibold text-gray-900 mb-2'>
            No Bookings Found
          </h3>
          <p class='text-gray-600 mb-6'>
            You haven't booked any sessions yet. Find a trainer and schedule
            your first session!
          </p>
          <a
            href='/search'
            class='inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium'
          >
            Find Trainers
          </a>
        </div>

        <!-- Pagination -->
        <div id='pagination' class='hidden mt-8 flex justify-center'>
          <div class='flex gap-2'>
            <button
              id='prevPage'
              onclick='bookingsManager.previousPage()'
              class='px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'
            >
              Previous
            </button>
            <span id='pageInfo' class='px-4 py-2 text-gray-600'></span>
            <button
              id='nextPage'
              onclick='bookingsManager.nextPage()'
              class='px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'
            >
              Next
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Booking Details Modal -->
  <div
    id='bookingModal'
    class='fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4'
  >
    <div
      class='bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden'
    >
      <!-- Modal Header -->
      <div class='bg-blue-600 text-white p-6 flex justify-between items-center'>
        <h2 id='modalTitle' class='text-2xl font-bold'></h2>
        <button
          onclick='bookingsManager.closeModal()'
          class='text-white hover:text-gray-200 text-3xl font-light'>×</button
        >
      </div>

      <!-- Modal Content -->
      <div id='modalContent' class='p-6 max-h-[60vh] overflow-y-auto'>
        <!-- Content will be loaded here -->
      </div>

      <!-- Modal Footer -->
      <div id='modalFooter' class='bg-gray-50 px-6 py-4 flex justify-end gap-3'>
        <!-- Action buttons will be loaded here -->
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  class BookingsManager {
    constructor() {
      this.bookings = [];
      this.currentPage = 1;
      this.limit = 10;
      this.totalPages = 1;
      this.filters = {
        status: "",
        upcoming: true,
      };
      this.init();
    }

    async init() {
      // Check authentication
      const token = localStorage.getItem("authToken");
      if (!token) {
        this.showAuthRequired();
        return;
      }

      // Load initial bookings
      await this.loadBookings();
    }

    showAuthRequired() {
      document.getElementById("loadingState").classList.add("hidden");
      document.getElementById("authRequired").classList.remove("hidden");
    }

    async loadBookings() {
      try {
        const token = localStorage.getItem("authToken");
        const params = new URLSearchParams({
          page: this.currentPage,
          limit: this.limit,
          upcoming: this.filters.upcoming,
          ...(this.filters.status && { status: this.filters.status }),
        });

        const response = await fetch(
          `http://localhost:5000/api/bookings/my-bookings?${params}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        const data = await response.json();

        if (data.success) {
          this.bookings = data.data.bookings;
          this.updatePagination(data.data.pagination);
          this.renderBookings();
          this.showMainContent();
        } else {
          throw new Error(data.error?.message || "Failed to load bookings");
        }
      } catch (error) {
        console.error("Error loading bookings:", error);
        this.showError(error.message);
      }
    }

    showMainContent() {
      document.getElementById("loadingState").classList.add("hidden");
      document.getElementById("mainContent").classList.remove("hidden");
    }

    renderBookings() {
      const container = document.getElementById("bookingsList");
      container.innerHTML = "";

      if (this.bookings.length === 0) {
        document.getElementById("emptyState").classList.remove("hidden");
        document.getElementById("pagination").classList.add("hidden");
        return;
      }

      document.getElementById("emptyState").classList.add("hidden");

      this.bookings.forEach((booking) => {
        const card = this.createBookingCard(booking);
        container.appendChild(card);
      });
    }

    createBookingCard(booking) {
      const div = document.createElement("div");
      div.className =
        "bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow";

      const statusColor = this.getStatusColor(booking.status);
      const formatIcon = booking.session_format === "online" ? "💻" : "🏋️";
      const sessionDate = new Date(booking.scheduled_at);
      const isUpcoming = sessionDate > new Date();

      div.innerHTML = `
        <div class="p-6">
          <div class="flex justify-between items-start mb-4">
            <div class="flex-1">
              <div class="flex items-center gap-3 mb-2">
                <h3 class="text-lg font-semibold text-gray-900">
                  ${booking.session_type_name}
                </h3>
                <span class="px-2 py-1 text-xs font-medium rounded-full ${statusColor}">
                  ${booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                </span>
              </div>
              <p class="text-gray-600 mb-1">
                ${formatIcon} ${booking.session_format === "online" ? "Online Session" : "In-Person Session"}
              </p>
              <p class="text-gray-600">
                With ${booking.trainer_first_name} ${booking.trainer_last_name}
                ${booking.business_name ? ` (${booking.business_name})` : ""}
              </p>
            </div>
            <div class="text-right">
              <p class="text-lg font-bold text-blue-600">$${booking.total_amount}</p>
              <p class="text-sm text-gray-500">${booking.duration_minutes} min</p>
            </div>
          </div>

          <div class="flex items-center gap-4 text-sm text-gray-600 mb-4">
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z">
                </path>
              </svg>
              <span>${sessionDate.toLocaleDateString("en-US", {
                weekday: "long",
                year: "numeric",
                month: "long",
                day: "numeric",
              })}</span>
            </div>
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z">
                </path>
              </svg>
              <span>${sessionDate.toLocaleTimeString("en-US", {
                hour: "numeric",
                minute: "2-digit",
                hour12: true,
              })}</span>
            </div>
          </div>

          <div class="flex gap-3">
            <button onclick="bookingsManager.viewDetails('${booking.id}')" 
                    class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors font-medium">
              View Details
            </button>
            ${
              isUpcoming && booking.status === "confirmed"
                ? `
              <button onclick="bookingsManager.cancelBooking('${booking.id}')" 
                      class="px-4 py-2 border border-red-300 text-red-600 rounded-lg hover:bg-red-50 transition-colors font-medium">
                Cancel
              </button>
            `
                : ""
            }
            ${
              booking.status === "completed"
                ? `
              <button onclick="bookingsManager.leaveReview('${booking.id}')" 
                      class="px-4 py-2 border border-green-300 text-green-600 rounded-lg hover:bg-green-50 transition-colors font-medium">
                Review
              </button>
            `
                : ""
            }
          </div>
        </div>
      `;

      return div;
    }

    getStatusColor(status) {
      const colors = {
        pending: "bg-yellow-100 text-yellow-800",
        confirmed: "bg-green-100 text-green-800",
        completed: "bg-blue-100 text-blue-800",
        cancelled: "bg-red-100 text-red-800",
        no_show: "bg-gray-100 text-gray-800",
      };
      return colors[status] || "bg-gray-100 text-gray-800";
    }

    updatePagination(pagination) {
      this.totalPages = pagination.pages;
      this.currentPage = pagination.page;

      if (pagination.total > this.limit) {
        document.getElementById("pagination").classList.remove("hidden");
        document.getElementById("pageInfo").textContent =
          `Page ${pagination.page} of ${pagination.pages} (${pagination.total} total)`;

        document.getElementById("prevPage").disabled = pagination.page <= 1;
        document.getElementById("nextPage").disabled =
          pagination.page >= pagination.pages;
      } else {
        document.getElementById("pagination").classList.add("hidden");
      }
    }

    async viewDetails(bookingId) {
      const booking = this.bookings.find((b) => b.id === bookingId);
      if (!booking) return;

      const modal = document.getElementById("bookingModal");
      const title = document.getElementById("modalTitle");
      const content = document.getElementById("modalContent");
      const footer = document.getElementById("modalFooter");

      title.textContent = booking.session_type_name;

      const sessionDate = new Date(booking.scheduled_at);
      const formatIcon = booking.session_format === "online" ? "💻" : "🏋️";

      content.innerHTML = `
        <div class="space-y-6">
          <!-- Booking Info -->
          <div>
            <h3 class="text-lg font-semibold text-gray-900 mb-3">Session Details</h3>
            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span class="text-gray-600">Date:</span>
                <span class="font-medium ml-2">${sessionDate.toLocaleDateString(
                  "en-US",
                  {
                    weekday: "long",
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  }
                )}</span>
              </div>
              <div>
                <span class="text-gray-600">Time:</span>
                <span class="font-medium ml-2">${sessionDate.toLocaleTimeString(
                  "en-US",
                  {
                    hour: "numeric",
                    minute: "2-digit",
                    hour12: true,
                  }
                )}</span>
              </div>
              <div>
                <span class="text-gray-600">Duration:</span>
                <span class="font-medium ml-2">${booking.duration_minutes} minutes</span>
              </div>
              <div>
                <span class="text-gray-600">Format:</span>
                <span class="font-medium ml-2">${formatIcon} ${booking.session_format === "online" ? "Online" : "In-Person"}</span>
              </div>
              <div>
                <span class="text-gray-600">Status:</span>
                <span class="font-medium ml-2 px-2 py-1 text-xs rounded-full ${this.getStatusColor(booking.status)}">
                  ${booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
                </span>
              </div>
              <div>
                <span class="text-gray-600">Payment:</span>
                <span class="font-medium ml-2">${booking.payment_status.charAt(0).toUpperCase() + booking.payment_status.slice(1)}</span>
              </div>
            </div>
          </div>

          <!-- Trainer Info -->
          <div>
            <h3 class="text-lg font-semibold text-gray-900 mb-3">Trainer</h3>
            <div class="flex items-center gap-4">
              <img src="${booking.trainer_image || "/api/placeholder/64/64"}" 
                   alt="${booking.trainer_first_name} ${booking.trainer_last_name}"
                   class="w-16 h-16 rounded-full object-cover">
              <div>
                <h4 class="font-semibold text-gray-900">
                  ${booking.trainer_first_name} ${booking.trainer_last_name}
                </h4>
                ${booking.business_name ? `<p class="text-gray-600">${booking.business_name}</p>` : ""}
              </div>
            </div>
          </div>

          <!-- Location/Meeting Info -->
          ${
            booking.session_format === "in_person" && booking.location_details
              ? `
            <div>
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Location</h3>
              <p class="text-gray-700">${booking.location_details}</p>
            </div>
          `
              : ""
          }

          ${
            booking.session_format === "online" && booking.meeting_link
              ? `
            <div>
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Meeting Link</h3>
              <a href="${booking.meeting_link}" target="_blank" 
                 class="text-blue-600 hover:underline break-all">${booking.meeting_link}</a>
            </div>
          `
              : ""
          }

          <!-- Notes -->
          ${
            booking.client_notes
              ? `
            <div>
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Your Notes</h3>
              <p class="text-gray-700">${booking.client_notes}</p>
            </div>
          `
              : ""
          }

          ${
            booking.trainer_notes
              ? `
            <div>
              <h3 class="text-lg font-semibold text-gray-900 mb-2">Trainer Notes</h3>
              <p class="text-gray-700">${booking.trainer_notes}</p>
            </div>
          `
              : ""
          }

          <!-- Pricing -->
          <div>
            <h3 class="text-lg font-semibold text-gray-900 mb-3">Pricing</h3>
            <div class="bg-gray-50 rounded-lg p-4">
              <div class="flex justify-between items-center text-lg font-semibold">
                <span>Total Amount:</span>
                <span class="text-blue-600">$${booking.total_amount}</span>
              </div>
            </div>
          </div>
        </div>
      `;

      footer.innerHTML = `
        <button onclick="bookingsManager.closeModal()" 
                class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
          Close
        </button>
      `;

      modal.classList.remove("hidden");
    }

    closeModal() {
      document.getElementById("bookingModal").classList.add("hidden");
    }

    async cancelBooking(bookingId) {
      if (!confirm("Are you sure you want to cancel this booking?")) return;

      try {
        const token = localStorage.getItem("authToken");
        const response = await fetch(
          `http://localhost:5000/api/bookings/${bookingId}/status`,
          {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({
              status: "cancelled",
              cancellationReason: "Cancelled by client",
            }),
          }
        );

        const data = await response.json();

        if (data.success) {
          alert("Booking cancelled successfully");
          this.loadBookings(); // Reload bookings
        } else {
          throw new Error(data.error?.message || "Failed to cancel booking");
        }
      } catch (error) {
        console.error("Error cancelling booking:", error);
        alert("Failed to cancel booking. Please try again.");
      }
    }

    leaveReview(bookingId) {
      alert(
        "Review system coming soon! You will be able to rate and review your trainer after completed sessions."
      );
    }

    applyFilters() {
      this.filters.status = document.getElementById("statusFilter").value;
      const timeFilter = document.getElementById("timeFilter").value;

      if (timeFilter === "upcoming") {
        this.filters.upcoming = true;
      } else if (timeFilter === "past") {
        this.filters.upcoming = false;
      } else {
        delete this.filters.upcoming;
      }

      this.currentPage = 1;
      this.loadBookings();
    }

    clearFilters() {
      this.filters = { upcoming: true };
      document.getElementById("statusFilter").value = "";
      document.getElementById("timeFilter").value = "upcoming";
      this.currentPage = 1;
      this.loadBookings();
    }

    async previousPage() {
      if (this.currentPage > 1) {
        this.currentPage--;
        await this.loadBookings();
      }
    }

    async nextPage() {
      if (this.currentPage < this.totalPages) {
        this.currentPage++;
        await this.loadBookings();
      }
    }

    showError(message) {
      const container = document.getElementById("bookingsList");
      container.innerHTML = `
        <div class="text-center py-16">
          <div class="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-10 h-10 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z">
              </path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-2">Error Loading Bookings</h3>
          <p class="text-gray-600 mb-6">${message}</p>
          <button onclick="bookingsManager.loadBookings()" 
                  class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
            Try Again
          </button>
        </div>
      `;
      this.showMainContent();
    }
  }

  // Initialize the bookings manager
  document.addEventListener("DOMContentLoaded", () => {
    window.bookingsManager = new BookingsManager();
  });
</script>

