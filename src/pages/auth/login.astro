---
import BaseLayout from "../../layouts/BaseLayout.astro";

const title = "Login - FitProFinder";
const description =
  "Login to your FitProFinder account to book sessions, manage your profile, and connect with fitness professionals.";
---

<BaseLayout title={title} description={description}>
  <div
    class='min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8'
  >
    <div class='sm:mx-auto sm:w-full sm:max-w-md'>
      <div class='text-center'>
        <h1 class='text-3xl font-bold text-gray-900'>Welcome Back</h1>
        <p class='mt-2 text-gray-600'>Sign in to your FitProFinder account</p>
      </div>
    </div>

    <div class='mt-8 sm:mx-auto sm:w-full sm:max-w-md'>
      <div class='bg-white py-8 px-4 shadow-lg sm:rounded-lg sm:px-10'>
        <!-- Login Form -->
        <form id='loginForm' class='space-y-6'>
          <!-- Email -->
          <div>
            <label for='email' class='block text-sm font-medium text-gray-700'>
              Email address
            </label>
            <div class='mt-1'>
              <input
                id='email'
                name='email'
                type='email'
                autocomplete='email'
                required
                class='appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500'
                placeholder='Enter your email'
              />
            </div>
          </div>

          <!-- Password -->
          <div>
            <label
              for='password'
              class='block text-sm font-medium text-gray-700'
            >
              Password
            </label>
            <div class='mt-1'>
              <input
                id='password'
                name='password'
                type='password'
                autocomplete='current-password'
                required
                class='appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500'
                placeholder='Enter your password'
              />
            </div>
          </div>

          <!-- Remember me and Forgot password -->
          <div class='flex items-center justify-between'>
            <div class='flex items-center'>
              <input
                id='remember-me'
                name='remember-me'
                type='checkbox'
                class='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'
              />
              <label for='remember-me' class='ml-2 block text-sm text-gray-900'>
                Remember me
              </label>
            </div>

            <div class='text-sm'>
              <a
                href='/auth/forgot-password'
                class='font-medium text-blue-600 hover:text-blue-500'
              >
                Forgot your password?
              </a>
            </div>
          </div>

          <!-- Submit Button -->
          <div>
            <button
              type='submit'
              id='loginBtn'
              class='w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors'
            >
              Sign in
            </button>
          </div>

          <!-- Error Message -->
          <div id='errorMessage' class='hidden'>
            <div
              class='bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm'
            >
              <span id='errorText'></span>
            </div>
          </div>
        </form>

        <!-- Divider -->
        <div class='mt-6'>
          <div class='relative'>
            <div class='absolute inset-0 flex items-center'>
              <div class='w-full border-t border-gray-300'></div>
            </div>
            <div class='relative flex justify-center text-sm'>
              <span class='px-2 bg-white text-gray-500'>Or</span>
            </div>
          </div>
        </div>

        <!-- Demo Login Buttons -->
        <div class='mt-6 space-y-3'>
          <h3 class='text-sm font-medium text-gray-700 text-center'>
            üß™ Demo Accounts - Click to Login
          </h3>
          <div class='grid grid-cols-1 gap-2'>
            <button
              type='button'
              id='demoClientBtn'
              class='w-full flex items-center justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors'
            >
              <span class='mr-2'>üßë‚Äçüíº</span>
              <div class='text-left'>
                <div class='font-medium'>Sarah Johnson</div>
                <div class='text-xs text-gray-500'>Client ‚Ä¢ sarah@fitpro.com</div>
              </div>
            </button>
            <button
              type='button'
              id='demoTrainerBtn'
              class='w-full flex items-center justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors'
            >
              <span class='mr-2'>üèãÔ∏è</span>
              <div class='text-left'>
                <div class='font-medium'>Coach Taylor</div>
                <div class='text-xs text-gray-500'>Trainer ‚Ä¢ coach@fitpro.com</div>
              </div>
            </button>
            <button
              type='button'
              id='demoAdminBtn'
              class='w-full flex items-center justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors'
            >
              <span class='mr-2'>üë®‚Äçüíº</span>
              <div class='text-left'>
                <div class='font-medium'>Admin User</div>
                <div class='text-xs text-gray-500'>Admin ‚Ä¢ admin@fitpro.com</div>
              </div>
            </button>
          </div>
        </div>

        <!-- Sign up link -->
        <div class='mt-6 text-center'>
          <p class='text-sm text-gray-600'>
            Don't have an account?
            <a
              href='/auth/signup'
              class='font-medium text-blue-600 hover:text-blue-500'
            >
              Sign up here
            </a>
          </p>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Mock authentication system - no backend required

  // Authentication functionality
  const loginForm = document.getElementById("loginForm");
  const loginBtn = document.getElementById("loginBtn");
  const demoClientBtn = document.getElementById("demoClientBtn");
  const demoTrainerBtn = document.getElementById("demoTrainerBtn");
  const demoAdminBtn = document.getElementById("demoAdminBtn");
  const errorMessage = document.getElementById("errorMessage");
  const errorText = document.getElementById("errorText");

  // Demo user credentials for quick testing
  const demoCredentials = {
    client: {
      email: "sarah@fitpro.com",
      password: "sarah123",
      name: "Sarah Johnson",
      role: "client",
      profileImageUrl: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face"
    },
    trainer: {
      email: "coach@fitpro.com",
      password: "coach123",
      name: "Coach Taylor",
      role: "trainer",
      profileImageUrl: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=150&h=150&fit=crop&crop=face"
    },
    admin: {
      email: "admin@fitpro.com",
      password: "admin123",
      name: "Admin User",
      role: "admin",
      profileImageUrl: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face"
    },
  };

  function showError(message) {
    errorText.textContent = message;
    errorMessage.classList.remove("hidden");
  }

  function hideError() {
    errorMessage.classList.add("hidden");
  }

  function setLoading(loading) {
    if (loginBtn) {
      loginBtn.disabled = loading;
      loginBtn.textContent = loading ? "Signing in..." : "Sign in";
    }
  }

  function redirectToDashboard(userRole) {
    // Check for redirect parameter first
    const urlParams = new URLSearchParams(window.location.search);
    const redirectTo = urlParams.get('redirect');

    if (redirectTo) {
      // If there's a redirect parameter, use it
      window.location.href = redirectTo;
    } else {
      // Otherwise, redirect based on role
      if (userRole === "admin") {
        window.location.href = "/admin";
      } else if (userRole === "trainer") {
        window.location.href = "/dashboard/trainer";
      } else {
        window.location.href = "/dashboard/client";
      }
    }
  }

  // Mock authentication function
  function mockLogin(email, password) {
    // Check against demo credentials
    for (const [role, creds] of Object.entries(demoCredentials)) {
      if (creds.email === email && creds.password === password) {
        return {
          success: true,
          user: {
            id: creds.uid || `user_${Date.now()}`,
            email: creds.email,
            firstName: creds.name.split(' ')[0],
            lastName: creds.name.split(' ')[1] || '',
            role: creds.role,
            profileImageUrl: creds.profileImageUrl,
            isAuthenticated: true,
            loginTime: new Date().toISOString(),
          }
        };
      }
    }
    return { success: false, error: "Invalid email or password" };
  }

  // Handle form submission
  loginForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    hideError();
    setLoading(true);

    const formData = new FormData(loginForm);
    const email = formData.get("email");
    const password = formData.get("password");

    try {
      // Use mock authentication
      const response = mockLogin(email, password);

      if (response.success) {
        // Store user data in localStorage
        localStorage.setItem("fitpro_user", JSON.stringify(response.user));

        // Set mock access token for admin authentication
        const mockToken = `mock_token_${response.user.id}_${Date.now()}`;
        localStorage.setItem("fitpro_access_token", mockToken);

        // Show success notification
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
        notification.textContent = `Welcome back, ${response.user.firstName}!`;
        document.body.appendChild(notification);

        setTimeout(() => {
          notification.remove();
        }, 2000);

        // Redirect to dashboard
        setTimeout(() => {
          redirectToDashboard(response.user.role);
        }, 1000);
      } else {
        showError(response.error);
        setLoading(false);
      }
    } catch (error) {
      console.error("Login error:", error);
      showError("Login failed. Please try again.");
      setLoading(false);
    }
  });

  // Demo login buttons
  demoClientBtn?.addEventListener("click", () => {
    setLoading(true);
    const response = mockLogin(demoCredentials.client.email, demoCredentials.client.password);

    if (response.success) {
      localStorage.setItem("fitpro_user", JSON.stringify(response.user));

      // Set mock access token for admin authentication
      const mockToken = `mock_token_${response.user.id}_${Date.now()}`;
      localStorage.setItem("fitpro_access_token", mockToken);

      // Show success notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      notification.textContent = `Welcome back, ${response.user.firstName}!`;
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.remove();
        redirectToDashboard(response.user.role);
      }, 1000);
    } else {
      showError("Demo login failed. Please try manual login.");
      setLoading(false);
    }
  });

  demoTrainerBtn?.addEventListener("click", () => {
    setLoading(true);
    const response = mockLogin(demoCredentials.trainer.email, demoCredentials.trainer.password);

    if (response.success) {
      localStorage.setItem("fitpro_user", JSON.stringify(response.user));

      // Set mock access token for admin authentication
      const mockToken = `mock_token_${response.user.id}_${Date.now()}`;
      localStorage.setItem("fitpro_access_token", mockToken);

      // Show success notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      notification.textContent = `Welcome back, ${response.user.firstName}!`;
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.remove();
        redirectToDashboard(response.user.role);
      }, 1000);
    } else {
      showError("Demo login failed. Please try manual login.");
      setLoading(false);
    }
  });

  demoAdminBtn?.addEventListener("click", () => {
    setLoading(true);
    const response = mockLogin(demoCredentials.admin.email, demoCredentials.admin.password);

    if (response.success) {
      localStorage.setItem("fitpro_user", JSON.stringify(response.user));

      // Set mock access token for admin authentication
      const mockToken = `mock_token_${response.user.id}_${Date.now()}`;
      localStorage.setItem("fitpro_access_token", mockToken);

      // Show success notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      notification.textContent = `Welcome back, ${response.user.firstName}!`;
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.remove();
        redirectToDashboard(response.user.role);
      }, 1000);
    } else {
      showError("Demo login failed. Please try manual login.");
      setLoading(false);
    }
  });

  // Check if already logged in
  const existingUser = localStorage.getItem("fitpro_user");
  if (existingUser) {
    const userData = JSON.parse(existingUser);
    if (userData.isAuthenticated) {
      redirectToDashboard(userData.role);
    }
  }
</script>
