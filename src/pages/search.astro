---
import BaseLayout from "../layouts/BaseLayout.astro";

const title = "Find Trainers - FitProFinder";
const description =
  "Search and filter fitness trainers by location, specialty, and more.";
---

<BaseLayout title={title} description={description}>
  <!-- Search Hero Section -->
  <div class='bg-gradient-to-r from-blue-600 to-purple-700 text-white py-16'>
    <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>
      <div class='text-center'>
        <h1 class='text-4xl font-bold mb-4'>Find Your Perfect Trainer</h1>
        <p class='text-xl mb-8 text-blue-100'>
          Connect with certified fitness professionals in your area
        </p>

        <!-- Main Search Bar -->
        <div class='max-w-2xl mx-auto'>
          <div class='flex flex-col sm:flex-row gap-4'>
            <div class='flex-1'>
              <input
                type='text'
                id='searchInput'
                placeholder='Search by name, specialty, or location...'
                class='w-full px-4 py-3 rounded-lg border-2 border-white/30 bg-white/95 text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-white focus:border-white shadow-lg backdrop-blur-sm'
              />
            </div>
            <button
              id='searchBtn'
              class='px-8 py-3 bg-white text-blue-600 font-semibold rounded-lg hover:bg-gray-50 focus:ring-2 focus:ring-white transition-colors shadow-lg'
            >
              Search
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Search Results Section -->
  <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12'>
    <div class='flex flex-col lg:flex-row gap-8'>
      <!-- Filters Sidebar -->
      <div class='lg:w-1/4'>
        <div class='bg-white rounded-lg shadow-sm border p-6 sticky top-4'>
          <h3 class='text-lg font-semibold text-gray-900 mb-4'>Filters</h3>

          <!-- Location Filter -->
          <div class='mb-6'>
            <label class='block text-sm font-medium text-gray-700 mb-2'
              >Location</label
            >
            <div class='space-y-2'>
              <input
                type='text'
                id='cityFilter'
                placeholder='City'
                class='w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500'
              />
              <select
                id='stateFilter'
                class='w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500'
              >
                <option value=''>All States</option>
                <option value='CA'>California</option>
                <option value='TX'>Texas</option>
                <option value='WA'>Washington</option>
                <option value='NY'>New York</option>
                <option value='FL'>Florida</option>
              </select>
            </div>
          </div>

          <!-- Specialty Filter -->
          <div class='mb-6'>
            <label class='block text-sm font-medium text-gray-700 mb-2'
              >Specialty</label
            >
            <select
              id='specialtyFilter'
              class='w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500'
            >
              <option value=''>All Specialties</option>
              <!-- Will be populated by JavaScript -->
            </select>
          </div>

          <!-- Rating Filter -->
          <div class='mb-6'>
            <label class='block text-sm font-medium text-gray-700 mb-2'
              >Minimum Rating</label
            >
            <select
              id='ratingFilter'
              class='w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500'
            >
              <option value=''>Any Rating</option>
              <option value='4.5'>4.5+ Stars</option>
              <option value='4.0'>4.0+ Stars</option>
              <option value='3.5'>3.5+ Stars</option>
            </select>
          </div>

          <!-- Session Type Filter -->
          <div class='mb-6'>
            <label class='block text-sm font-medium text-gray-700 mb-2'
              >Session Type</label
            >
            <div class='space-y-2'>
              <label class='flex items-center'>
                <input
                  type='checkbox'
                  id='onlineFilter'
                  class='rounded border-gray-300 text-blue-600 focus:ring-blue-500'
                />
                <span class='ml-2 text-sm text-gray-600'>Online Sessions</span>
              </label>
              <label class='flex items-center'>
                <input
                  type='checkbox'
                  id='inPersonFilter'
                  class='rounded border-gray-300 text-blue-600 focus:ring-blue-500'
                />
                <span class='ml-2 text-sm text-gray-600'
                  >In-Person Sessions</span
                >
              </label>
            </div>
          </div>

          <!-- Verified Filter -->
          <div class='mb-6'>
            <label class='flex items-center'>
              <input
                type='checkbox'
                id='verifiedFilter'
                class='rounded border-gray-300 text-blue-600 focus:ring-blue-500'
              />
              <span class='ml-2 text-sm text-gray-600'
                >Verified Trainers Only</span
              >
            </label>
          </div>

          <!-- Clear Filters -->
          <button
            id='clearFilters'
            class='w-full px-4 py-2 text-sm text-blue-600 border border-blue-600 rounded-md hover:bg-blue-50 transition-colors'
          >
            Clear All Filters
          </button>
        </div>
      </div>

      <!-- Results Section -->
      <div class='lg:w-3/4'>
        <!-- Results Header -->
        <div class='flex justify-between items-center mb-6'>
          <div>
            <h2 class='text-2xl font-bold text-gray-900'>Trainers Near You</h2>
            <p id='resultsCount' class='text-gray-600'>Loading...</p>
          </div>
          <div class='flex items-center space-x-4'>
            <label class='text-sm text-gray-700'>Sort by:</label>
            <select
              id='sortBy'
              class='px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500'
            >
              <option value='rating'>Highest Rated</option>
              <option value='reviews'>Most Reviews</option>
              <option value='experience'>Most Experience</option>
            </select>
          </div>
        </div>

        <!-- Loading State -->
        <div id='loadingState' class='text-center py-12'>
          <div
            class='animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto'
          >
          </div>
          <p class='mt-4 text-gray-600'>Finding trainers...</p>
        </div>

        <!-- Results Grid -->
        <div
          id='trainersGrid'
          class='hidden grid grid-cols-1 md:grid-cols-2 gap-6'
        >
          <!-- Trainer cards will be inserted here by JavaScript -->
        </div>

        <!-- No Results State -->
        <div id='noResults' class='hidden text-center py-12'>
          <div class='text-gray-400 mb-4'>
            <svg
              class='w-16 h-16 mx-auto'
              fill='none'
              stroke='currentColor'
              viewBox='0 0 24 24'
            >
              <path
                stroke-linecap='round'
                stroke-linejoin='round'
                stroke-width='2'
                d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'></path>
            </svg>
          </div>
          <h3 class='text-xl font-medium text-gray-900 mb-2'>
            No trainers found
          </h3>
          <p class='text-gray-600'>
            Try adjusting your search criteria or location.
          </p>
        </div>

        <!-- Pagination -->
        <div
          id='pagination'
          class='hidden mt-12 flex justify-center items-center space-x-4'
        >
          <button
            id='prevPage'
            class='px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed'
          >
            Previous
          </button>
          <span id='pageInfo' class='text-sm text-gray-700'></span>
          <button
            id='nextPage'
            class='px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed'
          >
            Next
          </button>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  class TrainerSearch {
    constructor() {
      this.currentPage = 1;
      this.currentFilters = {};
      this.specialties = [];
      this.init();
    }

    async init() {
      await this.loadSpecialties();
      await this.searchTrainers();
      this.setupEventListeners();
    }

    async loadSpecialties() {
      try {
        const response = await fetch(
          "http://localhost:5000/api/trainers/specialties"
        );
        const data = await response.json();
        if (data.success) {
          this.specialties = data.data.specialties;
          this.populateSpecialtyFilter();
        }
      } catch (error) {
        console.error("Failed to load specialties:", error);
      }
    }

    populateSpecialtyFilter() {
      const specialtyFilter = document.getElementById("specialtyFilter");
      if (specialtyFilter && this.specialties) {
        this.specialties.forEach((specialty) => {
          const option = document.createElement("option");
          option.value = specialty.id;
          option.textContent = specialty.name;
          specialtyFilter.appendChild(option);
        });
      }
    }

    setupEventListeners() {
      // Search button and input
      const searchBtn = document.getElementById("searchBtn");
      const searchInput = document.getElementById("searchInput");

      if (searchBtn)
        searchBtn.addEventListener("click", () => this.handleSearch());
      if (searchInput) {
        searchInput.addEventListener("keypress", (e) => {
          if (e.key === "Enter") this.handleSearch();
        });
      }

      // Filters
      ["cityFilter", "stateFilter", "specialtyFilter", "ratingFilter"].forEach(
        (id) => {
          const element = document.getElementById(id);
          if (element) {
            element.addEventListener("change", () => this.handleFilterChange());
          }
        }
      );

      ["onlineFilter", "inPersonFilter", "verifiedFilter"].forEach((id) => {
        const element = document.getElementById(id);
        if (element) {
          element.addEventListener("change", () => this.handleFilterChange());
        }
      });

      // Clear filters
      const clearBtn = document.getElementById("clearFilters");
      if (clearBtn)
        clearBtn.addEventListener("click", () => this.clearFilters());

      // Sort
      const sortBy = document.getElementById("sortBy");
      if (sortBy) sortBy.addEventListener("change", () => this.handleSearch());

      // Pagination
      const prevBtn = document.getElementById("prevPage");
      const nextBtn = document.getElementById("nextPage");
      if (prevBtn) prevBtn.addEventListener("click", () => this.previousPage());
      if (nextBtn) nextBtn.addEventListener("click", () => this.nextPage());
    }

    handleSearch() {
      this.currentPage = 1;
      this.searchTrainers();
    }

    handleFilterChange() {
      this.currentPage = 1;
      this.searchTrainers();
    }

    clearFilters() {
      const elements = [
        "searchInput",
        "cityFilter",
        "stateFilter",
        "specialtyFilter",
        "ratingFilter",
      ];
      elements.forEach((id) => {
        const element = document.getElementById(id);
        if (element) element.value = "";
      });

      const checkboxes = ["onlineFilter", "inPersonFilter", "verifiedFilter"];
      checkboxes.forEach((id) => {
        const element = document.getElementById(id);
        if (element) element.checked = false;
      });

      this.handleSearch();
    }

    getSearchParams() {
      const params = new URLSearchParams();

      const searchInput = document.getElementById("searchInput");
      const search = searchInput ? searchInput.value.trim() : "";
      if (search) params.append("search", search);

      const cityFilter = document.getElementById("cityFilter");
      const city = cityFilter ? cityFilter.value.trim() : "";
      if (city) params.append("city", city);

      const stateFilter = document.getElementById("stateFilter");
      const state = stateFilter ? stateFilter.value : "";
      if (state) params.append("state", state);

      const specialtyFilter = document.getElementById("specialtyFilter");
      const specialty = specialtyFilter ? specialtyFilter.value : "";
      if (specialty) params.append("specialty", specialty);

      const ratingFilter = document.getElementById("ratingFilter");
      const rating = ratingFilter ? ratingFilter.value : "";
      if (rating) params.append("min_rating", rating);

      const onlineFilter = document.getElementById("onlineFilter");
      if (onlineFilter && onlineFilter.checked) {
        params.append("online_sessions", "true");
      }

      const inPersonFilter = document.getElementById("inPersonFilter");
      if (inPersonFilter && inPersonFilter.checked) {
        params.append("in_person_sessions", "true");
      }

      const verifiedFilter = document.getElementById("verifiedFilter");
      if (verifiedFilter && verifiedFilter.checked) {
        params.append("verified_only", "true");
      }

      params.append("page", this.currentPage.toString());
      params.append("limit", "12");

      return params;
    }

    async searchTrainers() {
      this.showLoading();

      try {
        const params = this.getSearchParams();
        const response = await fetch(
          `http://localhost:5000/api/trainers?${params}`
        );
        const data = await response.json();

        if (data.success) {
          this.displayResults(data.data);
        } else {
          throw new Error(data.error?.message || "Search failed");
        }
      } catch (error) {
        console.error("Search failed:", error);
        this.showError("Failed to search trainers. Please try again.");
      }
    }

    showLoading() {
      const loadingState = document.getElementById("loadingState");
      const trainersGrid = document.getElementById("trainersGrid");
      const noResults = document.getElementById("noResults");
      const pagination = document.getElementById("pagination");

      if (loadingState) loadingState.classList.remove("hidden");
      if (trainersGrid) trainersGrid.classList.add("hidden");
      if (noResults) noResults.classList.add("hidden");
      if (pagination) pagination.classList.add("hidden");
    }

    displayResults(data) {
      const { trainers, pagination } = data;

      const loadingState = document.getElementById("loadingState");
      if (loadingState) loadingState.classList.add("hidden");

      // Update results count
      const resultsCount = document.getElementById("resultsCount");
      if (resultsCount) {
        resultsCount.textContent = `${pagination.total} trainer${pagination.total !== 1 ? "s" : ""} found`;
      }

      if (trainers.length === 0) {
        const noResults = document.getElementById("noResults");
        if (noResults) noResults.classList.remove("hidden");
        return;
      }

      // Display trainers
      const grid = document.getElementById("trainersGrid");
      if (grid) {
        grid.innerHTML = "";
        grid.classList.remove("hidden");

        trainers.forEach((trainer) => {
          grid.appendChild(this.createTrainerCard(trainer));
        });
      }

      // Update pagination
      this.updatePagination(pagination);
    }

    createTrainerCard(trainer) {
      const card = document.createElement("div");
      card.className =
        "bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow cursor-pointer";
      card.onclick = () => (window.location.href = `/trainers/${trainer.id}`);

      card.innerHTML = `
        <div class="p-6">
          <div class="flex items-start space-x-4">
            <img 
              src="${trainer.profileImageUrl}" 
              alt="${trainer.firstName} ${trainer.lastName}"
              class="w-16 h-16 rounded-full object-cover"
            />
            <div class="flex-1">
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900">
                  ${trainer.firstName} ${trainer.lastName}
                  ${trainer.isVerified ? '<span class="text-blue-500 ml-1">✓</span>' : ""}
                </h3>
                <div class="flex items-center">
                  <span class="text-yellow-400">★</span>
                  <span class="text-sm font-medium text-gray-900 ml-1">${trainer.rating}</span>
                  <span class="text-sm text-gray-500 ml-1">(${trainer.reviewCount})</span>
                </div>
              </div>
              
              <p class="text-blue-600 font-medium text-sm">${trainer.businessName}</p>
              <p class="text-gray-600 text-sm">${trainer.location.city}, ${trainer.location.state}</p>
              
              <p class="text-gray-700 text-sm mt-2 line-clamp-2">${trainer.bio}</p>
              
              <div class="flex flex-wrap gap-1 mt-3">
                ${trainer.specialties
                  .slice(0, 3)
                  .map(
                    (specialty) =>
                      `<span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">${specialty}</span>`
                  )
                  .join("")}
                ${
                  trainer.specialties.length > 3
                    ? `<span class="text-xs text-gray-500">+${trainer.specialties.length - 3} more</span>`
                    : ""
                }
              </div>
              
              <div class="flex items-center justify-between mt-4">
                <div class="flex space-x-2 text-xs text-gray-600">
                  ${trainer.offers.onlineSessions ? '<span class="bg-green-100 text-green-800 px-2 py-1 rounded">Online</span>' : ""}
                  ${trainer.offers.inPersonSessions ? '<span class="bg-purple-100 text-purple-800 px-2 py-1 rounded">In-Person</span>' : ""}
                </div>
                <span class="text-sm text-gray-500">${trainer.experienceYears} years exp.</span>
              </div>
            </div>
          </div>
        </div>
      `;

      return card;
    }

    updatePagination(pagination) {
      const paginationEl = document.getElementById("pagination");
      const prevBtn = document.getElementById("prevPage");
      const nextBtn = document.getElementById("nextPage");
      const pageInfo = document.getElementById("pageInfo");

      if (pagination.pages > 1) {
        if (paginationEl) paginationEl.classList.remove("hidden");

        if (prevBtn) prevBtn.disabled = pagination.page === 1;
        if (nextBtn) nextBtn.disabled = pagination.page === pagination.pages;

        if (pageInfo)
          pageInfo.textContent = `Page ${pagination.page} of ${pagination.pages}`;
      } else {
        if (paginationEl) paginationEl.classList.add("hidden");
      }
    }

    previousPage() {
      if (this.currentPage > 1) {
        this.currentPage--;
        this.searchTrainers();
      }
    }

    nextPage() {
      this.currentPage++;
      this.searchTrainers();
    }

    showError(message) {
      const loadingState = document.getElementById("loadingState");
      const trainersGrid = document.getElementById("trainersGrid");
      const noResults = document.getElementById("noResults");

      if (loadingState) loadingState.classList.add("hidden");
      if (trainersGrid) trainersGrid.classList.add("hidden");
      if (noResults) {
        noResults.classList.remove("hidden");
        const errorTitle = noResults.querySelector("h3");
        const errorMessage = noResults.querySelector("p");
        if (errorTitle) errorTitle.textContent = "Search Error";
        if (errorMessage) errorMessage.textContent = message;
      }
    }
  }

  // Initialize the search when the page loads
  document.addEventListener("DOMContentLoaded", () => {
    const searchInstance = new TrainerSearch();

    // Read URL parameters and populate form
    const urlParams = new URLSearchParams(window.location.search);

    // Populate form fields from URL parameters
    const searchInput = document.getElementById("searchInput");
    if (searchInput && urlParams.get("search")) {
      searchInput.value = urlParams.get("search");
    }

    const cityFilter = document.getElementById("cityFilter");
    if (cityFilter && urlParams.get("city")) {
      cityFilter.value = urlParams.get("city");
    }

    const stateFilter = document.getElementById("stateFilter");
    if (stateFilter && urlParams.get("state")) {
      stateFilter.value = urlParams.get("state");
    }

    const specialtyFilter = document.getElementById("specialtyFilter");
    if (
      specialtyFilter &&
      (urlParams.get("specialty") || urlParams.get("category"))
    ) {
      // Handle both 'specialty' and 'category' parameters for compatibility
      const specialtyValue =
        urlParams.get("specialty") || urlParams.get("category");

      // Wait a bit for specialties to load, then set the value
      setTimeout(() => {
        // Try to find exact match first
        const exactOption = Array.from(specialtyFilter.options).find(
          (option) =>
            option.textContent.toLowerCase() === specialtyValue.toLowerCase() ||
            option.value === specialtyValue
        );

        if (exactOption) {
          specialtyFilter.value = exactOption.value;
        } else {
          // Try partial match for mapped categories
          const categoryMap = {
            "personal-training": "Personal Training",
            yoga: "Yoga",
            nutrition: "Nutrition Coaching",
            "strength-training": "Strength Training",
            pilates: "Pilates",
            cardio: "Cardio Training",
          };

          const mappedValue = categoryMap[specialtyValue] || specialtyValue;
          const partialOption = Array.from(specialtyFilter.options).find(
            (option) =>
              option.textContent
                .toLowerCase()
                .includes(mappedValue.toLowerCase())
          );

          if (partialOption) {
            specialtyFilter.value = partialOption.value;
          }
        }
      }, 500);
    }

    const ratingFilter = document.getElementById("ratingFilter");
    if (
      ratingFilter &&
      (urlParams.get("rating") || urlParams.get("min_rating"))
    ) {
      ratingFilter.value =
        urlParams.get("rating") || urlParams.get("min_rating");
    }

    const onlineFilter = document.getElementById("onlineFilter");
    if (onlineFilter && urlParams.get("online_sessions") === "true") {
      onlineFilter.checked = true;
    }

    const inPersonFilter = document.getElementById("inPersonFilter");
    if (inPersonFilter && urlParams.get("in_person_sessions") === "true") {
      inPersonFilter.checked = true;
    }

    const verifiedFilter = document.getElementById("verifiedFilter");
    if (verifiedFilter && urlParams.get("verified_only") === "true") {
      verifiedFilter.checked = true;
    }
  });
</script>
