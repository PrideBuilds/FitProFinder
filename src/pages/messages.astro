---
import BaseLayout from "../layouts/BaseLayout.astro";
import TrainerClientChat from "../components/TrainerClientChat.tsx";

// Mock user data - in production, this would come from authentication
const currentUser = {
  uid: "trainer_123", // or client_xxx
  name: "Coach Taylor",
  avatar: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=100&h=100&fit=crop&crop=face"
};

// Test users for demonstration
const testUsers = [
  { uid: "trainer_123", name: "Coach Taylor", role: "trainer", avatar: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=100&h=100&fit=crop&crop=face" },
  { uid: "client_456", name: "Sarah Johnson", role: "client", avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face" },
  { uid: "trainer_789", name: "Mike Wilson", role: "trainer", avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face" },
  { uid: "client_101", name: "Emily Davis", role: "client", avatar: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face" }
];

const APP_ID = import.meta.env.PUBLIC_COMETCHAT_APP_ID || "28168615443c8a22";
const REGION = import.meta.env.PUBLIC_COMETCHAT_REGION || "US";

const pageTitle = "Messages - FitProFinder";
---

<BaseLayout title={pageTitle}>
  <!-- Custom styles for message layout -->
  <style>
    /* Message container styling */
    .messages-area {
      height: calc(100vh - 300px); /* Fixed height for scrolling */
      overflow-y: auto;
      overflow-x: hidden;
      display: flex;
      flex-direction: column;
      padding: 1rem;
      gap: 1rem;
    }

    /* Message bubble styling */
    .message-bubble {
      word-wrap: break-word;
      overflow-wrap: break-word;
      word-break: break-word;
      hyphens: auto;
      max-width: 100%;
      white-space: pre-wrap;
    }

    /* Message container wrapper */
    .message-wrapper {
      display: flex;
      width: 100%;
      margin-bottom: 1rem;
    }

    .message-wrapper.own-message {
      justify-content: flex-end;
    }

    .message-wrapper.other-message {
      justify-content: flex-start;
    }

    /* Message content container */
    .message-content-container {
      max-width: 70%;
      min-width: 0; /* Important for text overflow */
      display: flex;
      flex-direction: column;
    }

    /* Message content bubble */
    .message-content-bubble {
      padding: 0.75rem 1rem;
      border-radius: 1rem;
      word-wrap: break-word;
      overflow-wrap: break-word;
      word-break: break-word;
      white-space: pre-wrap;
      max-width: 100%;
      box-sizing: border-box;
    }

    .message-content-bubble.own {
      background-color: #3b82f6;
      color: white;
      border-bottom-right-radius: 0.25rem;
    }

    .message-content-bubble.other {
      background-color: #f3f4f6;
      color: #111827;
      border-bottom-left-radius: 0.25rem;
    }

    /* Scroll to bottom smooth animation */
    .messages-area {
      scroll-behavior: smooth;
    }

    /* Chat interface layout */
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 100%;
      min-height: 0; /* Important for flex children */
    }

    /* Chat header fixed height */
    .chat-header {
      flex-shrink: 0;
      height: auto;
      min-height: 4rem;
    }

    /* Chat input area fixed height */
    .chat-input-area {
      flex-shrink: 0;
      height: auto;
      min-height: 5rem;
    }

    /* Avatar styling */
    .message-avatar {
      width: 2rem;
      height: 2rem;
      border-radius: 50%;
      flex-shrink: 0;
      margin: 0 0.5rem;
    }

    /* File attachments styling */
    .attachment-image {
      max-width: 100%;
      max-height: 16rem;
      height: auto;
      border-radius: 0.5rem;
      cursor: pointer;
      object-fit: cover;
      margin-top: 0.5rem;
    }

    .attachment-file {
      margin-top: 0.5rem;
      padding: 0.5rem;
      background-color: rgba(255, 255, 255, 0.2);
      border-radius: 0.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      min-width: 0;
      max-width: 100%;
    }

    .attachment-file a {
      color: inherit;
      text-decoration: underline;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      min-width: 0;
      max-width: 100%;
    }
  </style>

  <div class='min-h-screen bg-gray-50'>
    <!-- Header -->
    <div class='bg-white border-b border-gray-200 sticky top-0 z-10'>
      <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>
        <div class='flex items-center justify-between h-16'>
          <div class='flex items-center'>
            <h1 class='text-2xl font-bold text-gray-900'>Messages</h1>
          </div>
        </div>
      </div>
    </div>

    <!-- Main content -->
    <div class='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6'>
      <!-- User Selection for Testing -->
      <div class='mb-6 bg-blue-50 border border-blue-200 rounded-lg p-4'>
        <h3 class='text-lg font-semibold text-blue-900 mb-3'>ðŸ§ª Test User Login</h3>
        <p class='text-blue-700 mb-4'>Select a test user to simulate different roles and test the messaging system:</p>
        <div class='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3'>
          {testUsers.map((user) => (
            <button
              id={`user-${user.uid}`}
              class='flex items-center space-x-3 p-3 bg-white border border-blue-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-colors text-left cursor-pointer'
              data-uid={user.uid}
              data-name={user.name}
              data-avatar={user.avatar}
              data-role={user.role}
            >
              <img src={user.avatar} alt={user.name} class='w-10 h-10 rounded-full object-cover' />
              <div>
                <div class='font-medium text-gray-900'>{user.name}</div>
                <div class='text-sm text-gray-500 capitalize'>{user.role}</div>
              </div>
            </button>
          ))}
        </div>
        <div class='mt-3 text-sm text-blue-600'>
          <strong>Current User:</strong> <span id='current-user-display'>Coach Taylor (trainer)</span>
        </div>
      </div>

      <!-- Chat Interface -->
      <div
        class='bg-white rounded-lg shadow-sm border border-gray-200 h-[calc(100vh-280px)]'
      >
        <div id="chat-container">
          <TrainerClientChat
            client:only="react"
            appId={APP_ID}
            region={REGION}
            uid={currentUser.uid}
            name={currentUser.name}
            avatar={currentUser.avatar}
          />
        </div>
      </div>
    </div>

    <!-- User Selection Script -->
    <script>
      let selectedUser = {
        uid: 'trainer_123',
        name: 'Coach Taylor',
        avatar: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=100&h=100&fit=crop&crop=face',
        role: 'trainer'
      };

      function selectUser(uid, name, avatar, role) {
        console.log('selectUser called with:', { uid, name, avatar, role });
        selectedUser = { uid, name, avatar, role };

        // Update display
        document.getElementById('current-user-display').textContent = `${name} (${role})`;

        // Update button styles
        document.querySelectorAll('[id^="user-"]').forEach(btn => {
          btn.classList.remove('bg-blue-100', 'border-blue-400');
          btn.classList.add('bg-white', 'border-blue-200');
        });

        // Highlight selected user
        const selectedBtn = document.getElementById(`user-${uid}`);
        if (selectedBtn) {
          selectedBtn.classList.remove('bg-white', 'border-blue-200');
          selectedBtn.classList.add('bg-blue-100', 'border-blue-400');
        }

        // Show notification
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
        notification.textContent = `Switched to ${name} (${role})`;
        document.body.appendChild(notification);

        setTimeout(() => {
          notification.remove();
        }, 3000);

        // Update the React component props by updating the data attributes
        const chatComponent = document.querySelector('trainer-client-chat');
        if (chatComponent) {
          chatComponent.setAttribute('uid', uid);
          chatComponent.setAttribute('name', name);
          chatComponent.setAttribute('avatar', avatar);
        }

        console.log('Selected user:', selectedUser);
      }


      // Initialize with first user selected
      document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM loaded, initializing...');

        // Add event listeners to all user buttons
        document.querySelectorAll('[id^="user-"]').forEach(button => {
          button.addEventListener('click', function() {
            const uid = this.getAttribute('data-uid');
            const name = this.getAttribute('data-name');
            const avatar = this.getAttribute('data-avatar');
            const role = this.getAttribute('data-role');

            console.log('Button clicked:', { uid, name, avatar, role });
            selectUser(uid, name, avatar, role);
          });
        });

        // Initialize with first user selected (highlight the button)
        const firstButton = document.getElementById('user-trainer_123');
        if (firstButton) {
          firstButton.classList.remove('bg-white', 'border-blue-200');
          firstButton.classList.add('bg-blue-100', 'border-blue-400');
        }
      });
    </script>
  </div>

</BaseLayout>
